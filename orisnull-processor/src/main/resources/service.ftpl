package ${klass.packageName};

import com.evilcorp.orisnull.domain.BetterQueryParsingReplace;
<#list methods as method>
import ${method.entity.fullname};
import ${method.filter.fullname};
</#list>
import java.util.HashMap;
import java.lang.IllegalArgumentException;
import java.lang.Override;
import java.lang.String;
import java.util.Collections;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.TypedQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Arrays;

@Service
public class ${klass.shortname}Impl implements ${klass.shortname} {


    @Autowired
    EntityManagerFactory emf;
<#list methods as method>
    @Override
    public List<${method.entity.shortname}> ${method.name}(${method.filter.shortname} filter) {
        if (filter.isEmpty()) {
            return Collections.emptyList();
        }
        var params = new HashMap<String, Object>();
    <#list method.filter.fields as field>
        params.put("${field.name}", filter.${field.getter}());
    </#list>
        final var transformer = new BetterQueryParsingReplace(params);
        final var sql = transformer.cleanQuery("${method.alignedQuery}");
        final var em = emf.createEntityManager();
        final var query = em.createQuery(sql, ${method.entity.shortname}.class);
        params.forEach(query::setParameter);
        return query.getResultList();
    }
</#list>
}